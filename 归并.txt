void merge(int *array,int *tmp_array,int lpos,int rpos,int end)  
{
    int left_end = rpos - 1;
    int right_end = end;
    int left_pos = lpos;
    int right_pos = rpos;
    int i;

    int tmp = 0;
    while((left_pos <= left_end)&&(right_pos <= right_end))
    {
        if(array[left_pos] < array[right_pos])
        {
            tmp_array[tmp] = array[left_pos];
            ++left_pos;
        }
        else
        {
            tmp_array[tmp] = array[right_pos];
            ++right_pos;
        }
        ++tmp;
    }

    while(left_pos <= left_end)
    {
        tmp_array[tmp] = array[left_pos];
        left_pos++;
         ++tmp;
    }

    while(right_pos <= right_end)
    {
        tmp_array[tmp] = array[right_pos];
        right_pos++;
         ++tmp;
    }

    for(i = 0;i < tmp;i++)
    {
        array[lpos + i] = tmp_array[i];
    }

}


void m_sort(int *array,int *tmp_array,int left,int right)
{
    int centre = (left + right)/2;
    if(left < right)
    {
        m_sort(array,tmp_array,left,centre);
        m_sort(array,tmp_array,centre+1,right);
        merge(array,tmp_array,left,centre+1,right);
    }
}

void recursion_merge_sort(int *array,int num)
{
    int *tmp_array;
    tmp_array = malloc(num*sizeof(int));
    assert(tmp_array != NULL);
    m_sort(array,tmp_array,0,num-1);
     free(tmp_array);
}
